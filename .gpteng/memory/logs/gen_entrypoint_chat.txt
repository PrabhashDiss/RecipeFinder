
2024-04-07T13:21:44.269687
================================ System Message ================================

You will get information about a codebase that is currently on disk in the current folder.
The user will ask you to write a script that runs the code in a specific way.
You will answer with code blocks that include all the necessary terminal commands.
Do not install globally. Do not use sudo.
Do not explain the code, just give the commands.
Do not use placeholders, use example values (like . for a folder argument) if necessary.


================================ Human Message =================================


        Make a unix script that
        a) installs dependencies
        b) runs all necessary parts of the codebase (in parallel if necessary)
        
Information about the codebase:

```
File: src/recipe.py
1 from dataclasses import dataclass
2 import sqlite3
3 
4 @dataclass
5 class Recipe:
6     name: str
7     ingredients: list[str]
8     dietary_labels: set[str] = set()
9     preferences: set[str] = set()
10 
11     def __init__(self, name, ingredients):
12         self.name = name
13         self.ingredients = ingredients
14 
15 src/database.py

File: src/recipe.db
1 ```sql
2 -- Recipes table
3 CREATE TABLE recipes (
4     name TEXT,
5     ingredients TEXT,
6     dietary_labels TEXT,
7     preferences TEXT
8 );
9 
10 -- Preferences table (optional for storing user preferences)
11 CREATE TABLE IF NOT EXISTS preferences (
12     preference TEXT PRIMARY KEY
13 );

File: src/frontend/index.html
1 <!DOCTYPE html>
2 <html lang="en">
3 <head>
4   <meta charset="UTF-8">
5   <title>Recipe Finder</title>
6   <script src="app.js"></script>
7 </head>
8 <body>
9   <h1>Welcome to Recipe Finder!</h1>
10   <input type="text" id="userInput" placeholder="Enter your preferences or dietary restrictions (comma-separated)">
11   <button onclick="findRecipes()">Find Recipes</button>
12   <div id="recipes"></div>
13 </body>
14 </html>

File: src/frontend/app.js
1 async function fetchData(url) {
2   const response = await fetch(url);
3   return await response.json();
4 }
5 
6 function displayRecipes(recipes) {
7   // Display the received recipes on the UI
8 }
9 
10 async function findRecipes() {
11   const userInput = document.getElementById("userInput").value;
12   const url = "/api/recipes?preferences=" + userInput;
13   const recipes = await fetchData(url);
14   displayRecipes(recipes);
15 }

File: src/backend/server.py
1 from flask import Flask, jsonify, request
2 import database
3 
4 app = Flask(__name__)
5 
6 @app.route("/api/recipes")
7 def get_recipes():
8     # Fetch recipes based on user preferences and available ingredients
9     db = database.Database()
10 
11     user_preferences = request.args.get("preferences").split(',')
12 
13     recipes = []
14     for row in db._cursor.execute('''SELECT * FROM recipes WHERE dietary_labels IN (?) OR preferences IN (?)''', (set(db.Recipe.dietary_labels), set(user_preferences))):
15         recipe = Recipe(*row)
16         recipes.append(recipe.__dict__)
17     db._conn.commit()
18 
19     return jsonify({"recipes": recipes})
20 
21 app.run(port=5000, debug=True)

File: src/backend/db.py
1 from recipe import Recipe
2 import database
3 
4 def get_recipe_by_name(name):
5     db = database.Database()
6     recipe = None
7     for row in db._cursor.execute('''SELECT * FROM recipes WHERE name=?''', (name,)):
8         recipe = Recipe(*row)
9     db._conn.commit()
10     return recipe
11 
12 def save_recipe(recipe):
13     db = database.Database()
14     db._cursor.execute('INSERT INTO recipes VALUES (?, ?, ?, ?)', (recipe.name, str(recipe.ingredients), str(recipe.dietary_labels), str(recipe.preferences)))
15     db._conn.commit()

File: src/requirements.txt
1 Flask==2.1.2
2 sqlite3

File: src/package.json
1 {
2   "name": "recipe-finder",
3   "version": "1.0.0",
4   "description": "A web application for discovering new recipes.",
5   "main": "frontend/app.js",
6   "scripts": {
7     "start": "webpack serve frontend"
8   },
9   "dependencies": {
10     "axios": "^0.26.1"
11   }
12 }

```

================================== Ai Message ==================================


```bash
# Create a virtual environment (optional) and activate it
$ python3 -m venv .venv
source .venv/bin/activate

# Install dependencies
$ pip install -r src/requirements.txt
$ npm install
$ npm run build

# Run the codebase
$ python3 src/backend/server.py &
$ node src/frontend/index.html

# Optional: Start a development server for frontend (if not using "npm run start")
$ cd src/frontend && webpack serve --open .
```
